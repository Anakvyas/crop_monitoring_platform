import React, { useState, useEffect, useRef } from "react";
import { Leaf, MapPin, AlertTriangle, TrendingUp, Cpu, Layers } from "lucide-react";
import { motion } from "framer-motion";
import { useInView } from "react-intersection-observer";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import axios from 'axios';
const PYTHON_URL = import.meta.env.VITE_PYTHON_URL;
const Dashboard = () => {
const { ref, inView } = useInView({ triggerOnce: true, threshold: 0.2 });
  const fileRef = useRef();

  const [loading, setLoading] = useState(false);
  const [imageFile, setImageFile] = useState(null);
  const [artifacts, setArtifacts] = useState({ ndvi_map: null, soil_map: null, risk_map: null });
  const [temporal, setTemporal] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [soilSummary, setSoilSummary] = useState(null);
  const [riskZones, setRiskZones] = useState([]);
  const [fields, setFields] = useState([]);
  const fileInputRef = useRef(null);

  const mockResponse = {
    artifacts: {
      ndvi_map: '/placeholder_ndvi.png',
      soil_map: '/placeholder_soil.png',
      risk_map: '/placeholder_risk.png'
    },
    temporal: [
      { date: '2025-08-25', ndvi: 0.72, moisture: 24 },
      { date: '2025-09-01', ndvi: 0.68, moisture: 20 },
      { date: '2025-09-08', ndvi: 0.63, moisture: 18 },
      { date: '2025-09-15', ndvi: 0.55, moisture: 16 },
    ],
    alerts: [
      { id: 1, severity: 'High', title: 'Pest risk detected', detail: 'Zone C shows leaf spectral signature of possible infestation.' },
      { id: 2, severity: 'Medium', title: 'Low soil K', detail: 'Potassium below threshold in Zone A.' }
    ],
    soilSummary: { pH: 6.4, moisture: '18%', N: 'Medium', P: 'High', K: 'Low', score: 62 },
    riskZones: [{ id: 'Z1', name: 'Zone A', severity: 0.45 }, { id: 'Z2', name: 'Zone C', severity: 0.88 }],
    fields: [{ id: 'A', ndvi: 0.55, soilScore: 62, bbox: [77.0, 28.6] }, { id: 'C', ndvi: 0.22, soilScore: 40, bbox: [77.02, 28.62] }]
  };

  useEffect(() => {
    async function loadSnapshot() {
      try {
        const res = await fetch('/api/dashboard/latest');
        if (res.ok) {
          const json = await res.json();
          applyResponse(json);
        } else {
          applyResponse(mockResponse);
        }
      } catch (e) {
        applyResponse(mockResponse);
      }
    }
    loadSnapshot();
  }, []);

  function applyResponse(json) {
    setArtifacts(json.artifacts || mockResponse.artifacts);
    setTemporal(json.temporal || mockResponse.temporal);
    setAlerts(json.alerts || mockResponse.alerts);
    setSoilSummary(json.soilSummary || mockResponse.soilSummary);
    setRiskZones(json.riskZones || mockResponse.riskZones);
    setFields(json.fields || mockResponse.fields);
  }


    const handleImageChange = async (e) => {
        const file = e.target.files[0];
        if (file) {
            setImageFile(URL.createObjectURL(file));
            const formdata = new FormData()
            formdata.append('image',file);

            const res =  await axios.post(`${PYTHON_URL}/upload`,formdata,{
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });
            console.log(res.data);
        }
    }

    const openFilePicker = () => {
        fileInputRef.current.click();
    }

    
  async function analyzeImage() {
    if (!imageFile) return alert('Please choose a multispectral / hyperspectral image (or RGB+NIR)');
    setLoading(true);
    try {
      const fd = new FormData();
      fd.append('image', imageFile);
      const res = await fetch('/api/analyze', { method: 'POST', body: fd });
      if (!res.ok) {
        console.warn('Backend analyze failed or not present — using mock response');
        applyResponse(mockResponse);
      } else {
        const json = await res.json();
        applyResponse(json);
      }
    } catch (e) {
      console.error(e);
      applyResponse(mockResponse);
    } finally {
      setLoading(false);
    }
  }

  async function saveSnapshot() {
    setLoading(true);
    try {
      const payload = { artifacts, temporal, alerts, soilSummary, riskZones, fields };
      const res = await fetch('/api/save', {
        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
      });
      if (res.ok) alert('Snapshot saved'); else alert('Save failed (backend missing) — check console');
    } catch (e) { console.error(e); alert('Save failed'); }
    finally { setLoading(false); }
  }

  // small helpers
  const ndviBadge = (v) => {
    if (v >= 0.7) return 'bg-emerald-600 text-white';
    if (v >= 0.4) return 'bg-yellow-400 text-black';
    return 'bg-red-500 text-white';
  };


  return (
    <div className="min-h-[calc(100vh-64px)] bg-gradient-to-br from-green-50 via-green-100 to-white relative overflow-hidden font-sans">
      <div className="absolute top-0 left-0 w-full">
        <svg className="w-full h-20" viewBox="0 0 1440 80" fill="none" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none">
          <path d="M0,0 C240,60 480,60 720,30 C960,0 1200,0 1440,30 L1440,0 L0,0 Z" fill="rgba(34, 197, 94, 0.6)"/>
          <path d="M0,10 C240,70 480,70 720,40 C960,10 1200,10 1440,40 L1440,0 L0,0 Z" fill="rgba(34, 197, 94, 0.4)"/>
          <path d="M0,20 C240,80 480,80 720,50 C960,20 1200,20 1440,50 L1440,0 L0,0 Z" fill="rgba(34, 197, 94, 0.2)"/>
        </svg>
      </div>

      <motion.div ref={ref} initial={{ opacity: 0, y: 80 }} animate={inView ? { opacity: 1, y: 0 } : {}} transition={{ duration: 0.6 }}>
        <div className="relative z-10 max-w-7xl mx-auto px-6 py-8">
          {/* Header */}
          <header className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <Leaf className="text-green-600 w-10 h-10" />
              <div>
                <h1 className="text-2xl lg:text-3xl font-extrabold text-gray-800">फसलSaathi — Crop Monitoring Dashboard</h1>
                <p className="text-sm text-gray-600">Spectral health maps • Temporal trends • Alerts • Soil & risk analytics</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <input ref={fileInputRef} type="file" accept="image/*" className="hidden" onChange={handleImageChange} />
              <button onClick={() => fileInputRef.current.click()} className="px-3 py-2 bg-white border rounded-md">Upload Image</button>
              <button onClick={analyzeImage} className={`px-4 py-2 rounded-md text-white ${loading ? 'bg-gray-400' : 'bg-green-600'}`} disabled={loading}>{loading ? 'Analyzing...' : 'Analyze'}</button>
              <button onClick={saveSnapshot} className="px-4 py-2 rounded-md bg-emerald-600 text-white">Save</button>
            </div>
          </header>

          {/* Top: Spectral Health Map */}
          <section className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl p-4 mb-6">
            <div className="flex items-start justify-between gap-4">
              <div className="w-full">
                <div className="flex items-center justify-between mb-3">
                  <h2 className="text-lg font-semibold flex items-center gap-2"><MapPin className="w-5 h-5"/> Spectral Health Map</h2>
                  <div className="flex items-center gap-2">
                    <button className="px-3 py-1 rounded bg-slate-100">NDVI</button>
                    <button className="px-3 py-1 rounded bg-slate-100">Soil</button>
                    <button className="px-3 py-1 rounded bg-slate-100">Risk</button>
                  </div>
                </div>

                <div className="border rounded-lg h-96 overflow-hidden relative">
                  {/* show map images from artifacts returned by backend */}
                  <img src={artifacts.ndvi_map || '/placeholder_ndvi.png'} alt="ndvi" className="w-full h-full object-cover" />
                  {/* legend */}
                  <div className="absolute right-4 bottom-4 bg-white/90 rounded-md p-2 text-xs shadow">Legend: <span className="ml-2 font-semibold">Green healthy • Yellow stressed • Red unhealthy</span></div>
                </div>
              </div>

              <aside className="w-72 ml-4 flex-shrink-0">
                <div className="bg-white rounded-xl p-4 shadow mb-4">
                  <h3 className="font-semibold text-sm mb-2">Soil Condition Score</h3>
                  <div className="text-3xl font-bold">{soilSummary?.score ?? '—'}</div>
                  <div className="text-xs text-gray-500 mt-2">pH: {soilSummary?.pH ?? '—'} • Moisture: {soilSummary?.moisture ?? '—'}</div>
                </div>

                <div className="bg-white rounded-xl p-4 shadow mb-4">
                  <h3 className="font-semibold text-sm mb-2">Quick Actions</h3>
                  <button className="w-full py-2 rounded bg-yellow-500 text-white mb-2">Run Targeted Scan</button>
                  <button className="w-full py-2 rounded bg-sky-600 text-white">Generate Report</button>
                </div>

                <div className="bg-white rounded-xl p-3 shadow">
                  <h3 className="font-semibold text-sm mb-2">High Risk Zones</h3>
                  <ul className="text-sm text-gray-700 space-y-1">
                    {riskZones.map(r => (
                      <li key={r.id} className={`p-2 rounded ${r.severity>0.7? 'bg-red-50':'bg-yellow-50'}`}>{r.name} • {(r.severity*100).toFixed(0)}%</li>
                    ))}
                  </ul>
                </div>
              </aside>
            </div>
          </section>

          {/* Middle: Trends + Risk map */}
          <div className="grid lg:grid-cols-2 gap-6 mb-6">
            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow p-4">
              <h3 className="font-semibold mb-3 flex items-center gap-2"><TrendingUp className="w-5 h-5"/> Temporal Trend Plots</h3>
              <ResponsiveContainer width="100%" height={260}>
                <LineChart data={temporal}
                          margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="ndvi" stroke="#10B981" dot={false} />
                  <Line type="monotone" dataKey="moisture" stroke="#3B82F6" dot={false} />
                </LineChart>
              </ResponsiveContainer>
            </div>

            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow p-4">
              <h3 className="font-semibold mb-3 flex items-center gap-2"><Layers className="w-5 h-5"/> Predicted Risk Zones Map</h3>
              <div className="border rounded-lg h-64 overflow-hidden">
                <img src={artifacts.risk_map || '/placeholder_risk.png'} alt="risk" className="w-full h-full object-cover" />
              </div>
              <div className="mt-3 text-sm text-gray-600">Click a risk zone to see recommendations and targeted actions.</div>
            </div>
          </div>

          {/* Third: Alerts & Fields list */}
          <div className="grid lg:grid-cols-2 gap-6 mb-6">
            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow p-4">
              <h3 className="font-semibold mb-3 flex items-center gap-2"><AlertTriangle className="w-5 h-5 text-red-500"/> Anomaly Alerts</h3>
              <div className="space-y-3">
                {alerts.map(a => (
                  <div key={a.id} className={`p-3 rounded-lg ${a.severity==='High' ? 'bg-red-50 border border-red-200':'bg-yellow-50 border border-yellow-200'}`}>
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="font-semibold">{a.title}</div>
                        <div className="text-sm text-gray-600">{a.detail}</div>
                      </div>
                      <div className="text-xs text-gray-500">{a.severity}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow p-4">
              <h3 className="font-semibold mb-3 flex items-center gap-2"><Cpu className="w-5 h-5"/> Fields & Soil Summary</h3>
              <div className="grid grid-cols-1 gap-3">
                {fields.map(f => (
                  <div key={f.id} className="p-3 rounded-lg border bg-white">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="font-semibold">Field {f.id}</div>
                        <div className="text-sm text-gray-600">NDVI: {f.ndvi}</div>
                      </div>
                      <div className={`${ndviBadge(f.ndvi)} px-3 py-1 rounded`}>{f.soilScore}</div>
                    </div>
                    <div className="mt-2 text-sm text-gray-600">Actions: <button className="text-sm text-sky-600 underline">Inspect</button> • <button className="text-sm text-yellow-600 underline">Treat</button></div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Bottom actions */}
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">Last updated: {new Date().toLocaleString()}</div>
            <div className="flex gap-3">
              <button className="px-4 py-2 rounded bg-sky-600 text-white">Export PDF</button>
              <button className="px-4 py-2 rounded bg-white border" onClick={() => alert('Connect drone sensor flow not implemented')}>Connect Drone / Sensor</button>
            </div>
          </div>

        </div>
      </motion.div>
    </div>
  )
}

export default Dashboard;
